# gen_type_checks.py

from itertools import product

# 1. Base types and their signed/unsigned variants
base_types = {
    "char":       ["", "signed", "unsigned"],
    "short":      ["", "signed", "unsigned"],
    "int":        ["", "signed", "unsigned"],
    "long":       ["", "signed", "unsigned"],
    "long long":  ["", "signed", "unsigned"],
    "float":      [""],
    "double":     [""],
    "long double":[""],
    "_Bool":      [""],
    "void":       [""],  # only for pointers
}

# 2. Pointer levels
pointer_levels = ["", "*"]

# 3. Qualifiers
qualifiers = ["", "const "]

def generate_types():
    """Return list of all C type-strings like 'const unsigned long*'."""
    out = []
    for base, signs in base_types.items():
        for sign in signs:
            # skip signed/unsigned on float/double/_Bool/void
            if sign and base not in ("float","double","long double","_Bool","void"):
                t0 = f"{sign} {base}"
            else:
                t0 = base
            for qual in qualifiers:
                for ptr in pointer_levels:
                    # skip bare 'void'
                    if base=="void" and ptr=="":
                        continue
                    full = f"{qual}{t0}{ptr}".strip()
                    out.append(' '.join(full.split()))
    return out

def sanitize(typ: str) -> str:
    """Turn 'const unsigned long**' → 'const_u_long_pp'."""
    s = typ
    s = s.replace("const ", "const_")
    s = s.replace("unsigned ", "u_")
    s = s.replace("signed ", "s_")
    s = s.replace("long long", "ll")
    s = s.replace("long", "l")
    s = s.replace(" ", "_")
    s = s.replace("*", "p")
    return s

def main():
    types = generate_types()
    sanitized = [sanitize(t) for t in types]

    with open("type_checks.h", "w") as h:
        h.write("/* Autogenerated by gen_type_checks.py; do not edit. */\n")
        h.write("#ifndef TYPE_CHECKS_H\n#define TYPE_CHECKS_H\n\n")

        # Emit all TYPE_EQUAL_<A>_<B>
        for A, sa in zip(types, sanitized):
            for B, sb in zip(types, sanitized):
                val = "1" if A == B else "0"
                h.write(f"#define TYPE_EQUAL_{sa}_{sb} {val}\n")
        h.write("\n")

        # IS_SAME_TYPE macro
        h.write("/* Expand to 1 if identical type-ids, else 0 */\n")
        h.write("#define IS_SAME_TYPE(a, b)  TYPE_EQUAL_##a##_##b\n\n")

        h.write("#endif /* TYPE_CHECKS_H */\n")

    print(f"Wrote type_checks.h with {len(types)} types "
          f"→ {len(types)**2} comparisons.")

if __name__ == "__main__":
    main()
